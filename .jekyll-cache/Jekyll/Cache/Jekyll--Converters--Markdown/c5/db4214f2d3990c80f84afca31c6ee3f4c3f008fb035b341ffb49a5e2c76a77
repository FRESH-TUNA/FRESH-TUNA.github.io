I"m<h2 id="1-http란">1. HTTP란?</h2>
<p>클라이언트와 서버가 상호적으로 HTML 이나 JSON, XML 등의 리소스들 을 가져올 수 있도록 해주는 프로토콜 (약속) (형식)을 의미한다. <br />
이때 클라이언트는 주로 웹 브라우저, 앱, 테스트도구이며 HTTP 프로토콜은 어플리케이션 계층에서 최상위에 위치한다.
<a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Overview">https://developer.mozilla.org/ko/docs/Web/HTTP/Overview</a></p>

<h2 id="2-http-의-특징">2. HTTP 의 특징</h2>
<p>HTTP는 ‘Stateless’ 이다. 즉 동일한 connection 사이에  연속하여 전달된 두 개의 요청 사이에는 연결고리가 없다. (따로 서버에서 요청에 대한 정보를 보관하지 않는다.)<br />
<br />하지만, HTTP의 핵심은 상태가 없는 것이지만 HTTP 쿠키는 상태가 있는 세션을 만들수 있도록 도와준다.헤더 확장성을 사용하여, 동일한 컨텍스트 또는 각각의 요청들에 
세션을 만들도록 HTTP 쿠키를 추가 한다.</p>

<h2 id="3-http-request">3. HTTP REQUEST</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET / http/1.1
Host: <span class="o">[</span>developer.mozilla.org]<span class="o">(</span>https://developer.mozilla.org/<span class="o">)</span>
Accept-Language: ko
</code></pre></div></div>
<p>크게 METHOD, PATH, VERSION OF THE PROTOCOL, HEADERS 로 구성되었다.<br />
HTTP 메서드, 가져오려는 자원의 경로(프로토콜, 도메인, 포트를 제거한 나머지), HTTP 프로토콜의 버전.
서버에 대한 추가 정보를 전달하는 선택적 헤더들이 들어있다.</p>

<h2 id="4-http-response">4. HTTP RESPONSE</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    HTTP/1.1 200 OK
    Date: Sat, 09 Oct 2010 14:28:02 GMT
    Server: Apache
    Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
    ETag: <span class="s2">"51142bc1-7449-479b075b2891b"</span>
    Accept-Ranges: bytes
    Content-Length: 29769
    Content-Type: text/html
</code></pre></div></div>

<p>크게 VERSION OF THE PROTOCOL, STATUS OF CODE, Status Message, HEADERS 그리고 선택적으로 Content(Body)로 구성되어있다.<br /></p>
<ul>
  <li>HTTP 프로토콜의 버전.</li>
  <li>요청의 성공 여부와, 그 이유를 나타내는 상태 코드, 상태 메시지.</li>
  <li>그외 헤더들</li>
</ul>

<h2 id="3-http-method">3. HTTP METHOD</h2>
<h3 id="1-get">1. GET</h3>
<p>GET 요청 방식은 URI(URL)가 가진 정보를 검색하기 위해 서버 측에 요청하는형태이다출처:</p>

<h3 id="2-head">2. HEAD</h3>
<p>HEAD 요청 방식은 GET과 유사한 방식이나 웹 서버에서 헤더 정보 이외에는 어떤 데이터도 보내지 않는다.
웹 서버의 다운 여부 점검(Health Check)이나 웹 서버 정보(버전 등)등을 얻기 위해 사용될 수 있다.</p>

<h3 id="2-post">2. POST</h3>
<p>POST 요청 방식은 요청 URI(URL)에 폼 입력을 처리하기 위해 구성한 서버 측 스크립트(ASP, PHP, JSP 등) <br />
혹은 CGI 프로그램으로 구성되고 Form Action과 함께 전송되는데, 이때 헤더 정보에 포함되지 않고 데이터 부분에 
요청 정보가 들어가게 된다. </p>

<h3 id="3-put">3. PUT</h3>
<p>POST와 유사한 전송 구조를 가지기 때문에 헤더 이외에 메시지(데이터)가 함께 전송된다.<br />
원격지 서버에 지정한 콘텐츠를 저장하기 위해 사용되며 홈페이지 변조에 많이 악용되고 있다.</p>

<h3 id="4-fetch">4. FETCH</h3>
<p>PUT과 유사하게 요청된 자원을 수정(UPDATE)할 때 사용한다. PUT의 경우 자원 전체를 갱신하는 의미지만, PATCH는 해당자원의 일부를 교체하는 의미로 사용
<a href="참고링크">https://stackoverflow.com/questions/28459418/rest-api-put-vs-patch-with-real-life-examples</a></p>

<h3 id="5-delete">5. DELETE</h3>
<p>원격지 웹 서버에 파일을 삭제하기 위해 사용되며 PUT과는 반대 개념의 메소드이다</p>

<h3 id="6-connect">6. CONNECT</h3>
<p>동적으로 터널 모드를 교환, 프록시 기능을 요청시 사용</p>
<h4 id="1-proxy">1. proxy?</h4>

<p>애플리케이션 계층에서 중계하는 것을 일반적으로 프록시라 부른다.</p>

<ul>
  <li>캐싱 (캐시는 공개 또는 비공개가 될 수 있습니다 (예: 브라우저 캐시))</li>
  <li>필터링 (바이러스 백신 스캔, 유해 컨텐츠 차단(자녀 보호) 기능)</li>
  <li>로드 밸런싱 (여러 서버들이 서로 다른 요청을 처리하도록 허용)</li>
  <li>인증 (다양한 리소스에 대한 접근 제어)</li>
  <li>로깅 (이력 정보를 저장)</li>
</ul>

<h3 id="7-trace">7. TRACE</h3>
<p>클라이언트가 서버로 TRACE 요청을 보내면 서버는 요청받은 메시지를 그대로 반환하여 응답한다. <br />
이때 TRACE요청에 의해 반환되는 응답에는 사용자의 쿠키정보 등과 같은 중요정보도 포함되는 문제점이 있음
원격지 서버에 루프백 메시지 호출하기 위해 테스트용으로 사용</p>
<h4 id="1-xst-공격-시나리오">1. XST 공격 시나리오</h4>

<ul>
  <li>공격자가 표적 홈페이지의 XSS 취약점을 발견</li>
  <li>공격자가 XSS 취약점을 바탕으로 공격코드를 작성하여 관리자에게 메일 또는 게시글 작성</li>
  <li>관리자(로그인상태)는 메일에 포함된 공격코드 링크를 클릭 또는 자동 실행</li>
  <li>웹 브라우저는 XMLHttpRequest를 통해 서버에 TRACE로 접속하여 그 내용을 읽은 후 공격자에게 전송</li>
  <li>공격자는 전송받은 데이터에서 세션 쿠키를 추출하여 표적 홈페이지에 접속하면 관리자 권한을 획득</li>
</ul>

<h3 id="8-option">8. OPTION</h3>
<p>웹서버에서 지원되는 메소드의 종류를 확인할 경우 사용</p>
:ET